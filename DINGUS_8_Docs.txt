Little Endian (0xFFFE -> |0xFE|0xFF|)
8-bit data bus
16-bit address bus
8-bit registers: (max value is 0xFF anything over will wrap around))
A-+
B |-> General purpose registers.
C |
D-+
SP (prepended with 00 to get the address stored)
S (status)
16-bit register:
IP (16-bit, holds current address)
Access up-to 0xFFFF (2^16) in memory
0xFFFF +—————+
       |START| (Where to start executing.)
0xFFFD +—————+
       | RAM | (0x0100 -> 0xFFFD)
0x00FF +—————+
       |STACK| (0x0000 -> 0x00FF)
0x0000 +—————+
 7 6 5 4 3 2 1 0
+-+-+-+-+-+-+-+-+
|H| | |C|P|N|Z|O|
+-+-+-+-+-+-+-+-+
	0x0: Overflow, set when a register exceeds 0xFF and wraps around.
	0x1: Zero, set if a register receives a 0x00 value.
	0x2: Negative, Overflow in Subtraction.
	0x3: Parity, 1 if odd, 0 if even number of bits.
	0x4: Carry, Overflow in Addition.
	0x5: Unused
	0x6: Unused
	0x7: Halt, set when HLT (0x14) is called, clock will be ignored.
Instructions:
-NOP——————————————————————————————————————————————————————————————————
0x00: NOP: Do nothing.
—MOV——————————————————————————————————————————————————————————————————
0x01: MOVA (IMM8): Copy IMM8 into A [Z].
0x02: MOVB (IMM8): Copy IMM8 into B [Z].
0x03: MOVC (IMM8): Copy IMM8 into C [Z].
0x04: MOVD (IMM8): Copy IMM8 into D [Z].
0x05: CPY (REG)A, (REG)B: Copy A’s data to B [Z].
-MEMORY———————————————————————————————————————————————————————————————
0x06: LDR (REG8), (IMM16)ADR: Copy data to REG from ADR [Z].
0x07: STR (IMM16)ADR, (REG8): Copy data from REG to ADR.
—MATH—————————————————————————————————————————————————————————————————
0x08: ADD (REG8)A, (REG8)B: Add B to A and store in A [C, Z].
0x09: SUB (REG8)A, (REG8)B: Subtract B from A and store in A [Z, N].
0x0A: DEC (REG8): Decrement REG by 1 [Z, N].
0x0B: INC (REG8): Increment REG by 1 [C, Z].
0x0C: ADC (REG8)A, (REG8)B: Add B and (C) to A and store in A [Z, C].
0x0D: SBB (REG8)A, (REG8)B: Subtract B from A [Z, N].
0x0E: NEG (REG8): Make REG Negative (2’s complement) [Z, N].
0x0F: PAS (REG8): Don’t modify REG, just pass through [Z].
0000_1(000) -> 0000_1(111)
—STACK————————————————————————————————————————————————————————————————
0x10: PSHI (IMM8):
	Set data at SP to IMM8.
	Decrement SP.
0x11: PSHR (REG):
	Set data at SP to the value of REG.
	Decrement SP.
0x12: POP (REG): [Z]
	Increment SP.
	Set REG’s value to the data after SP.
	Set the data after SP to 0x00.
-JUMPING——————————————————————————————————————————————————————————————
0x13: JMP (IMM16)ADR: Jump to ADR without saving IP on the stack.
0x14: CALL (IMM16)ADR: Jump to ADR but save IP on the stack.
0x15: RET: Pop the next 2 values (Should be IP) to IP
0x16: JZ (IMM16)ADR: Jump to ADR if Zero (Z) is set.
0x17: JNZ (IMM16)ADR: Jump to ADR if Zero (Z) is not set.
-END——————————————————————————————————————————————————————————————————
0x18: HLT: [H]
Set H.
	Ignore the clock signal.
	Quit (If in Emulator).
	Must reset to undo!
-OVERFLOW—————————————————————————————————————————————————————————————
0x19: JO: (IMM16)ADR: Jump to ADR if Overflow (O) is set.
0x1A: JNO:(IMM16)ADR: Jump to ADR if Overflow (O) is not set.
-STATUS———————————————————————————————————————————————————————————————
0x1B: SETO: Set Overflow [O].
0x1C: CLRO: Clear Overflow [O].
0x1D: SETZ: Set Zero [O].
0x1E: CLRZ: Clear Zero [O].
0x1F: SETN: Set Negative [N].
0x20: CLRN: Clear Negative [N].
0x21: SETP: Set Parity [P].
0x22: CLRP: Clear Parity [P].
0x23: SETC: Set Carry [C]
0x24: CLRC: Clear Carry [C]
-LOGIC————————————————————————————————————————————————————————————————
0x25: AND (REG8)A, (REG8)B: Bitwise AND A and B and store in A.
0x26: OR (REG8)A, (REG8)B: Bitwise OR A and B and store in A.
0x27: XOR (REG8)A, (REG8)B: Bitwise XOR A and B and store in A.
0x28: NOT (REG8): Invert A and store in A.
0010_(0101) -> 0010_(1000)

