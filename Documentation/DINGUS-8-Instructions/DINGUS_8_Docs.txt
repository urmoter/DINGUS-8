Little Endian (0xFFFE -> |0xFE|0xFF|)
8-bit data bus
16-bit address bus

8-bit registers: (max value is 0xFF anything over will wrap around)
A-+
B |-> General purpose registers.
C |
D-+
SP (prepended with 00 to get the address stored)
BP (prepended with 00 to get the address stored), relative to SP
S (status)
RH/RL (see below)

16-bit register:
IP (16-bit, holds current address)
R (16-bit, saves return addresses on calls), only affected by CALL and RET

0xFFFE and 0xFFFF make the starting IP location:
        (0xFFFF)(0xFFFE)

0xFFFD is the Terminal buffer

Access up-to 0xFFFF (2^16) in memory
0xFFFF +-----+
       |START| (0xFFFE & 0xFFFF)
0xFFFE +-----+
       |PRINT| (0xFFFD)
0xFFFD +-----+
       | RAM | (0x0100 -> 0xFFFC)
0x0100 +-----+
       |STACK| (0x0000 -> 0x00FF)
0x0000 +-----+

 7 6 5 4 3 2 1 0
+-+-+-+-+-+-+-+-+
|H|I|T|C|P|N|Z|U|
+-+-+-+-+-+-+-+-+
	0x0: User Flag, dedicated for the user to modify.
	0x1: Zero, set if a register receives a 0x00 value.
	0x2: Negative, Overflow in Subtraction.
	0x3: Parity, 1 if odd, 0 if even number of bits.
	0x4: Carry, Overflow in Addition.
	0x5: Terminal, Active while printing to the Terminal memory address.
	0x6: Interrupt, (Currently not implemented).
	0x7: Halt, set when HLT (0x18) is called, clock will be ignored.

Argument Types:
    IMM8: An 8 bit argument that represents raw data, one byte wide.
    IMM16: A 16 bit argument that represents raw data, 2 bytes wide.
    REG8: An 8 bit value that represents one of the four general purpose registers, one byte wide.
        0x00 represents A
        0x01 represents B
        0x02 represents C
        0x03 represents D

Stack grows downwards

Instructions:
-DIRECTIVES/NO OPCODE---------------------------------------------------------------------------------------
1. Directives
    1.1. .setloc (IMM16): Set compiler IP to IMM16, a sort of pseudo jump.
    1.2. .start (IMM16): Set 0xFFFE and 0xFFFF to IMM16 (setting a start address).
2. No Opcode
    2.1. LBL (label): Store the address and name of the label (pointing to the current IP value) as a pair.
-NOP--------------------------------------------------------------------------------------------------------
0x00: NOP: Do nothing.
-MOV--------------------------------------------------------------------------------------------------------
0x01: MOVA (IMM8)Immediate: Copy Immediate into A [Z, P].
0x02: MOVB (IMM8)Immediate: Copy Immediate into B [Z, P].
0x03: MOVC (IMM8)Immediate: Copy Immediate into C [Z, P].
0x04: MOVD (IMM8)Immediate: Copy Immediate into D [Z, P].
0x05: CPY (REG)Source, (REG)Destination: Copy Source’s value to Destination [Z, P].
-MEMORY-----------------------------------------------------------------------------------------------------
0x06: STR (REG8)Source (IMM16)Address: Copy Source's value to the byte in memory pointed to by Address [Z, P].
0x07: LDR (IMM16)Address (REG8)Destination: Copy data from the byte in memory pointed to by Address to Destination [Z, P].
-MATH-------------------------------------------------------------------------------------------------------
0x08: ADD (REG8)Destination (REG8)Source: Add Source's value to Destination's value and store in Destination [C, Z, P].
0x09: SUB (REG8)Destination (REG8)SRC: Subtract Source's value from Destination's value and store in Destination [Z, N, P].
0x0A: INC (REG8)Destination: Increment Destination's value by 1 [Z, C, P].
0x0B: DEC (REG8)Destination: Decrement Destination's value by 1 [Z, N, P].
0x0C: ADC (REG8)Destination (REG8)Source: Add Source's value and the carry bit to Destination's value and store in Destination [Z, C, P].
0x0D: SBB (REG8)Destination (REG8)Source: Subtract Source's value and the negative bit from Destination's value and store in Destination [Z, N, P].
0x0E: NEG (REG8)Destination: Make Destination's value Negative (2’s complement) [Z, N, P].
0x0F: FLP (REG8)Destination: Flip Destination's value value around b(10101010) -> b(01010101) [Z, N, P].
-STACK------------------------------------------------------------------------------------------------------
0x10: PSHI (IMM8)Immediate:
	Set the value pointed to by SP to Immediate.
	Decrement the value pointed to by SP.
0x11: PSHR (REG)Source:
	Set the value pointed to by SP to the Source's value
	Decrement the value pointed to by SP.
0x12: POP (REG)Destination: [Z, P]
	Increment the value pointed to by SP.
	Set Destination's value to the data at SP.
	Set the value pointed to by SP to 0x00.
-JUMPING----------------------------------------------------------------------------------------------------
0x13: JMP (IMM16)Address: Set the value pointed to by IP to the byte in memory pointed to by Address without saving IP on the stack.
0x14: CALL (IMM16)Address:
    Make a Call Stack Frame
    Set the value of BP to the value of SP+2;
0x15: RET:
    Pop the next 2 values (Should be IP) to IP
    Set the value pointed to by SP to the value pointed to by BP
    Set the value pointed to by BP to 0x00
0x16: JZ (IMM16)Address: Jump to Address if Zero (Z) is set.
0x17: JNZ (IMM16)Address: Jump to Address if Zero (Z) is not set.
-END--------------------------------------------------------------------------------------------------------
0x18: HLT: [H]
    Set H.
	Ignore the clock signal.
	Quit (If in Emulator).
	Must reset to undo!
-USER-------------------------------------------------------------------------------------------------------
0x19: JU: (IMM16)Address: Jump to Address if User Flag (U) is set.
0x1A: JNU: (IMM16)Address: Jump to Address if User Flag (U) is not set.
-STATUS-----------------------------------------------------------------------------------------------------
0x1B: SETU: Set User Flag [U].
0x1C: CLRU: Clear User Flag [U].
0x1D: SETZ: Set Zero [O].
0x1E: CLRZ: Clear Zero [O].
0x1F: SETN: Set Negative [N].
0x20: CLRN: Clear Negative [N].
0x21: SETP: Set Parity [P].
0x22: CLRP: Clear Parity [P].
0x23: SETC: Set Carry [C]
0x24: CLRC: Clear Carry [C]
-LOGIC------------------------------------------------------------------------------------------------------
0x25: AND (REG8)Destination (REG8)Source: Bitwise AND Destination's value and Source's value and store in Destination [Z, P].
0x26: OR (REG8)Destination (REG8)Source: Bitwise OR Destination's value and Source's value and store in Destination [Z, P].
0x27: XOR (REG8)Destination (REG8)Source: Bitwise XOR Destination's value and Source's value and store in Destination [Z, P].
0x28: NOT (REG8)Destination: Invert Destination's value and store in Destination [Z, P].
-EQUAL------------------------------------------------------------------------------------------------------
0x29: JE (IMM16)Address (REG8)Destination (REG8)Source: Jump to Address if Destination's value and Source's value are equal.
0x2A: JNE (IMM16)Address (REG8)Destination (REG8)Source: Jump to Address if Destination's value and Source's value are not equal.
-INEQUALITY-------------------------------------------------------------------------------------------------
0x2B: JG (IMM16)Address (REG8)Destination (REG8)Source: Jump to Address if Destination's value is greater than Source's value
0x2C: JL (IMM16)Address (REG8)Destination (REG8)Source: JJump to Address if Destination's value is less than Source's value
-PRINT------------------------------------------------------------------------------------------------------
0x2D: PRNI (IMM8)Value: Set 0xFFFD to Value, and set the Terminal flag [T].
0x2E: PRNR (REG8)Source: Set 0xFFFD to Source's value and set the Terminal flag [T].
0x2F: ENPR: Clear the Terminal flag (Required when done printing) [T].
-CARRY------------------------------------------------------------------------------------------------------
0x30: JC (IMM16)Address: Jump to Address if Carry Flag (C) is set.
0x31: JNC (IMM16)Address: Jump to Address if Carry Flag (C) is not set.
-NEGATIVE---------------------------------------------------------------------------------------------------
0x32: JN (IMM16)Address: Jump to Address if Negative Flag (N) is set.
0x33: JNN (IMM16)Address: Jump to Address if Negative Flag (M) is not set.
-PARITY-----------------------------------------------------------------------------------------------------
0x34: JP (IMM16)Address: Jump to Address if Parity Flag (P) is set.
0x35: JNP (IMM16)Address: Jump to Address if Parity Flag (P) is not set.
-TEMP-------------------------------------------------------------------------------------------------------
0x36: IBPR (IMM8)OFFSET (REG8)Destination: Copy data from the BP (Stack Pointer)+OFFSET to Destination [Z, P].
-OFFSET-----------------------------------------------------------------------------------------------------
0x37: LDRO (IMM16)Address, (REG8)OFFSET, (REG8)Destination: Copy data from the byte in memory pointed to by Address+(OFFSET's value) to Destination [Z, P].